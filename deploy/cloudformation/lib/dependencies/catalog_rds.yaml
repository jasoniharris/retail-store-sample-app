AWSTemplateFormatVersion: '2010-09-09'
Description: Retail Store Sample App - Catalog RDS

Parameters:
  EnvironmentName:
    Type: String
  PrivateSubnets:
    Type: CommaDelimitedList 
    Description: Comma-delimited list of private subnet
  SecurityGroups:
    Type: CommaDelimitedList 
    Description: Comma-delimited list of private subnet


# TODO - Check ECS user name needed
Resources:
  CatalogDB:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-mysql
      EngineVersion: '8.0.mysql_aurora.3.07.1'
      DBClusterIdentifier: !Sub "${EnvironmentName}-catalog"
      MasterUsername: !Sub '{{resolve:secretsmanager:${CatalogDBMasterPassword}::username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${CatalogDBMasterPassword}::password}}'
      DBSubnetGroupName: !Ref CatalogDBSubnetGroup
      VpcSecurityGroupIds: !Ref SecurityGroups
      DatabaseName: catalog
      StorageEncrypted: true
      DeletionProtection: false
      Port: 3306

  CatalogDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora-mysql
      DBInstanceClass: db.t3.medium
      DBClusterIdentifier: !Ref CatalogDB
      PubliclyAccessible: false

  CatalogDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets available for the RDS DB
      SubnetIds: !Ref PrivateSubnets

  CatalogDBMasterPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Catalog DB Master User
      GenerateSecretString:
        SecretStringTemplate: '{"username": "catalogmaster"}'
        GenerateStringKey: password
        PasswordLength: 10
        ExcludePunctuation: true


Outputs:
  CatalogDBEndpoint:
    Description: Catalog DB Endpoint
    Value: !GetAtt CatalogDB.Endpoint.Address
  CatalogDBMasterPasswordARN:
    Description: Catalog DB Master Passowrd Secret ARN
    Value: !GetAtt CatalogDBMasterPassword.Id
